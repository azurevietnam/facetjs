// Generated by CoffeeScript 1.6.2
(typeof window === 'undefined' ? {} : window)['applyStringer'] = (function(module, require){"use strict"; var exports = module.exports;
var arithemticMap, arithemticType, convertApply, convertApplyHelper;

arithemticMap = {
  'add': '+',
  'subtract': "-",
  'multiply': "*",
  'divide': "/"
};

arithemticType = {
  'add': 'addition',
  'subtract': "addition",
  'multiply': "multiplication",
  'divide': "multiplication"
};

convertApplyHelper = function(apply, from) {
  var arType, expr, mappedArithmetic;

  if (apply.aggregate) {
    switch (apply.aggregate) {
      case 'constant':
        expr = String(apply.value);
        break;
      case 'sum':
      case 'min':
      case 'max':
      case 'uniqueCount':
        expr = "" + apply.aggregate + "(`" + apply.attribute + "`)";
        break;
      default:
        throw new Error("unsupported aggregate");
    }
  } else if (apply.arithmetic) {
    arType = arithemticType[apply.arithmetic];
    mappedArithmetic = arithemticMap[apply.arithmetic];
    if (!mappedArithmetic) {
      throw "no such arithmetic";
    }
    expr = "" + (convertApplyHelper(apply.operands[0], arType)) + " " + mappedArithmetic + " " + (convertApplyHelper(apply.operands[1], arType));
    if (from === 'multiplication' && arType === 'addition') {
      expr = "(" + expr + ")";
    }
  }
  return expr;
};

module.exports = convertApply = function(apply) {
  return "" + apply.name + " <- " + (convertApplyHelper(apply, 'addition'));
};

return module.exports; }).call(this,
  (typeof module === 'undefined' ? {exports: {}} : module),
  (typeof require === 'undefined' ? function (modulePath) {
    var moduleParts = modulePath.split('/');
    return window[moduleParts[moduleParts.length - 1]];
  } : require)
);
